# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sgotipy_pb2 as sgotipy__pb2


class SgotipyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSgotipy = channel.unary_unary(
                '/Sgotipy/StartSgotipy',
                request_serializer=sgotipy__pb2.StartSgotipyRequest.SerializeToString,
                response_deserializer=sgotipy__pb2.StartSgotipyResponse.FromString,
                )
        self.StopSgotipy = channel.unary_unary(
                '/Sgotipy/StopSgotipy',
                request_serializer=sgotipy__pb2.StopSgotipyRequest.SerializeToString,
                response_deserializer=sgotipy__pb2.StopSgotipyResponse.FromString,
                )
        self.SgotipyStatus = channel.unary_unary(
                '/Sgotipy/SgotipyStatus',
                request_serializer=sgotipy__pb2.SgotipyStatusRequest.SerializeToString,
                response_deserializer=sgotipy__pb2.SgotipyStatusResponse.FromString,
                )


class SgotipyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartSgotipy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSgotipy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SgotipyStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SgotipyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSgotipy': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSgotipy,
                    request_deserializer=sgotipy__pb2.StartSgotipyRequest.FromString,
                    response_serializer=sgotipy__pb2.StartSgotipyResponse.SerializeToString,
            ),
            'StopSgotipy': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSgotipy,
                    request_deserializer=sgotipy__pb2.StopSgotipyRequest.FromString,
                    response_serializer=sgotipy__pb2.StopSgotipyResponse.SerializeToString,
            ),
            'SgotipyStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SgotipyStatus,
                    request_deserializer=sgotipy__pb2.SgotipyStatusRequest.FromString,
                    response_serializer=sgotipy__pb2.SgotipyStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sgotipy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sgotipy(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartSgotipy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sgotipy/StartSgotipy',
            sgotipy__pb2.StartSgotipyRequest.SerializeToString,
            sgotipy__pb2.StartSgotipyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopSgotipy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sgotipy/StopSgotipy',
            sgotipy__pb2.StopSgotipyRequest.SerializeToString,
            sgotipy__pb2.StopSgotipyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SgotipyStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sgotipy/SgotipyStatus',
            sgotipy__pb2.SgotipyStatusRequest.SerializeToString,
            sgotipy__pb2.SgotipyStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
